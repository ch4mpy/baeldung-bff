<h2>1. Overview</h2>
In this tutorial we'll take a deeper dive into BFF for SPA with <em>spring-cloud-gateway</em> and <a href="https://github.com/ch4mpy/spring-addons"><em>spring-addons-starter-oidc</em></a>.

<a href="https://github.com/spring-projects/spring-authorization-server/issues/297#issue-896744390">According to security experts</a>, we should not configure any more single-page (Angular, React, Vue, etc.) and mobile applications as "public" OAuth2 clients. Instead, <strong>we should authorize SPAs with sessions on a <em>Backend For Frontend</em> running on the server</strong>.

The good news is that we'll have only simple modifications to do to existing SPAs to connect it to a BFF and no modification at all on resource servers (REST APIs authorized with <em>Bearer</em> access tokens).

In this tutorial, we'll use:
<ul>
 	<li><em>spring-cloud-gateway</em> configured as a "confidential" OAuth2 client with authorization-code flow and the <em>TokenRelay</em> filter to implement the <em>Backend For Frontend</em> pattern</li>
 	<li>a Spring Boot REST API configured as a stateless OAuth2 resource server</li>
 	<li>an OIDC authorization server</li>
 	<li>a reverse proxy to have the same origin for at least the SPA and the BFF</li>
 	<li><a href="https://github.com/ch4mpy/spring-addons"><em>spring-addons-starter-oidc</em></a>, an open-source Spring Boot starter, to further simplify OAuth2 configuration in Spring Boot applications</li>
</ul>
<h2>2. OAuth2 BFF Pattern</h2>
The <em>Backend For Frontend</em> pattern is an architecture with a middleware between a frontend and REST APIs. When OAuth2 is involved, requests are authorized with:
<ul>
 	<li>session cookie and CSRF protection between the frontend and the BFF</li>
 	<li>access token between the BFF and REST API (and between services on the backend)</li>
</ul>
Such a BFF is responsible for:
<ul>
 	<li>driving the authorization-code flow using a "confidential" OAuth2 client</li>
 	<li>storing tokens in session</li>
 	<li>replacing session cookie with the access token in session before forwarding a request from the frontend to a resource server</li>
</ul>
This pattern is safer than configuring single-page and mobile applications as "public" OAuth2 clients because:
<ul>
 	<li>the BFF running on a server we trust, we can provide it with a secret to call the authorization server token endpoint</li>
 	<li>for the same reason, we can set firewall rules to allow only requests from our backend to access the token endpoint</li>
 	<li>tokens are kept on the server (sessions). Usage of session cookie requires protection against CSRF, but cookies can be flagged with <em>HttpOnly</em>, <em>Secure</em> and <em>SameSite</em>, which is safer than exposing tokens to the code running on end-user devices.</li>
</ul>
As BFF, we'll use <em>spring-cloud-gateway</em> with:
<ul>
 	<li><em>spring-boot-starter-oauth2-client</em> and <em>oauth2Login()</em> to handle authorization-code flow and store tokens in session</li>
 	<li>the <em>TokenRelay=</em> filter to replace session cookie with access token in session when forwarding requests from the frontend to a resource server</li>
</ul>
<h2>3. Architecture</h2>
So far, we listed quite a few services: 3 single-page applications, a REST API, a BFF, an authorization server and a reverse proxy. Let's have a look at how it makes a coherent system.
<h3>3.1. System Overview</h3>
Here is a representation of services, ports and path-prefixes we'll use:

<a href="https://drafts.baeldung.com/wp-content/uploads/2024/01/system-architecture.png"><img class="aligncenter size-full wp-image-188113" src="https://drafts.baeldung.com/wp-content/uploads/2024/01/system-architecture.png" alt="frontend is in contact with reverse-proxy only which, depending on path-prefix, routes requests to one of the service exposing SPAs assets, the BFF or the authorization server. Resource server is behind the BFF and accessed only through it." /></a>

A few points to note from this schema are:
<ul>
 	<li>from the end-user devices perspective, there is a single point of contact with the backend: the reverse proxy (two contact points if we serve the authorization server with an origin of its own)</li>
 	<li>we expose three different single-page applications to demo the integration with each of the major frameworks (Angular, React and Vue)</li>
 	<li>the reverse-proxy uses path prefix to route requests to the right service</li>
</ul>
Using path-prefix to make a distinction between SPAs is nice when working on a single dev machine, but when going to a production-like environment, we might switch to a reverse-proxy using (sub)domains for routing, or even use a distinct reverse-proxy for each SPA.
<h3>3.2. Reverse Proxy</h3>
Because the requests are authorized with session cookies between the frontend and the BFF, and because Spring session cookies are flagged with <em>SameSite=Lax</em>, <strong>we need the same origin for a SPA and its BFF</strong>. For that, we'll use a reverse proxy as single contact point for browsers. It will route requests to the right service using path-prefix.

In the companion repo, we use a very basic <em>spring-cloud-gateway</em> instance with just some routing (no security, no fancy filters), but there are plenty of other options to achieve the same goal, some being more adapted to specific environments: nginx container in Docker, ingress on K8s, etc.
<h3>3.3. Whether to Hide the Authorization Server Behind the Reverse Proxy</h3>
Depending on what we want to achieve, we'll include the authorization server among the services hidden behind the reverse proxy, or serve it from an origin of its own.

If the authorization server has the same authority as a SPA, it is easy to include the login forms into an iframe inside the web-app (<em>https://my-domain.net/appx</em> authenticates users on <em>https://my-domain.net/auth</em>).

On the other hand, Single Sign On relies on cookies flagged with <em>SameOrigin.</em> As a consequence, for two SPAs to benefit from SSO it should not only authenticate users on the same authorization server, but also use the same authority for it (both <em>https://appx.net</em> and <em>https://appy.net</em> authenticate users on <em>https://sso.net</em>).

One option to match both conditions is using URIs like <em>https://my-domain.net/appx</em> and <em>https://my-domain.net/appy</em> both authenticating users on <em>https://my-domain.net/auth</em>. This is the option we'll use when working with Keycloak, but <strong>sharing the same origin between the SPAs and the authorization server is not a requirement for the BFF pattern to work, only sharing the same origin between the SPAs and the BFF is</strong> (and this is what we'll do with Cognito and Auth0 profiles).
<h3>3.4. SSL</h3>
Many of the requests in our system will hold some sort of credentials (either session &amp; CSRF or access token). The cookies holding such values should be flagged with <em>Secure</em> (the browser would attach such cookies only to <em>https</em> requests). The same way, headers like <em>Authorization</em> and <em>X_XSRF_TOKEN</em> should be set only on <em>https</em> requests.

For this reason, the companion repo contains profiles to run each service with a self-signed certificate on dev machines.

Following <a href="https://github.com/ch4mpy/self-signed-certificate-generation">this Github repository</a> instructions, generating such a certificates and adding it to your JREs/JDKs <em>cacerts</em> files as well as OS root authorities is straight forward.

In each of our Spring application.yml, we'll use the following:
<pre><code class="language-yaml">scheme: https
server:
  ssl:
    enabled: true
---
spring:
  config:
    activate:
      on-profile: no-ssl
server:
  ssl:
    enabled: false
scheme: http</code></pre>
This settings force SSL to be enabled in default profile. This requires the <em>SERVER_SSL_KEY_PASSWORD</em>, <em>SERVER_SSL_KEY_STORE_PASSWORD</em> and <em>SERVER_SSL_KEY_STORE</em> environment variables to be set, but you may use the <em>no-ssl</em> profile to disable SSL.

All configuration values containing a URI pointing to one of the Spring applications will use this <em>${scheme}</em> we define here to adapt to SSL being enabled or not.
<h3>3.5. Implementation</h3>
Firstly, using our IDE or <a href="https://start.spring.io/">https://start.spring.io/</a>, we create a new Spring Boot project named <em>reverse-proxy</em> with <em>Reactive Gateway</em> as dependency.

Then we rename <em>src/main/resources/application.properties</em> to <em>src/main/resources/application.yml.</em>

In addition to the SSL configuration we already described, we need to define the routing properties for spring-cloud-gateway:
<pre><code class="language-yaml"># Custom properties to ease configuration overrides
# on command-line or IDE launch configurations
scheme: https
hostname: localhost
reverse-proxy-port: 7080
angular-port: 4201
angular-prefix: /angular-ui
angular-uri: ${scheme}://${hostname}:${angular-port}${angular-prefix}
vue-port: 4202
vue-prefix: /angular-ui
vue-uri: ${scheme}://${hostname}:${vue-port}${vue-prefix}
react-port: 4203
react-prefix: /angular-ui
react-uri: ${scheme}://${hostname}:${react-port}${react-prefix}
authorization-server-port: 8443
authorization-server-prefix: /auth
authorization-server-uri: https://${hostname}:${authorization-server-port}${authorization-server-prefix}
bff-port: 7081
bff-prefix: /bff
bff-uri: ${scheme}://${hostname}:${bff-port}${bff-prefix}

server:
  port: ${reverse-proxy-port}
  ssl:
    enabled: true

spring:
  cloud:
    gateway:
      default-filters:
      - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
      routes:
      # SPAs assets
      - id: angular-ui
        uri: ${angular-uri}
        predicates:
        - Path=${angular-prefix}/**
      - id: vue-ui
        uri: ${vue-uri}
        predicates:
        - Path=${vue-prefix}/**
      - id: react-ui
        uri: ${react-uri}
        predicates:
        - Path=${react-prefix}/**
      
      # Authorization-server
      - id: authorization-server
        uri: ${authorization-server-uri}
        predicates:
        - Path=${authorization-server-prefix}/**
      
      # Proxy BFF
      - id: bff
        uri: ${bff-uri}
        predicates:
        - Path=${bff-prefix}/**,/login/**,/oauth2/**,/logout,/login-options</code></pre>
With this configuration added, we can start our reverse-proxy!
<h2>4. Authorization Server</h2>
In the companion project on Github the default profile is designed for Keycloak but, thanks to <em>spring-addons-starter-oidc</em>, switching to any other OpenID Provider is just a matter of editing <em>application-properties.yml.</em> The file provided in the companion project contains profiles to get started easily with Auth0, Okta and Amazon Cognito.
<h3>4.1. Keycloak in Docker</h3>
The companion repo contains a docker-compose.yaml. To use it, all we need to do is:
<ul>
 	<li>copy the certificate and request key to the ssl folder next to the compose file and rename it respectively to <em>self_signed.crt</em> and <em>req_key.pem</em></li>
 	<li>create a <em>default.env copy </em>named <em>.env</em> and edit <em>KEYCLOAK_ADMIN_PASSWORD</em></li>
 	<li>run <em>docker compose up</em> from the directory containing the docker-compose file</li>
</ul>
<h3>4.2. Standalone Keycloak</h3>
Firstly, we'd need to edit <em>keycloak.conf</em> to add something like the following:
<pre><code class="language-properties">hostname-strict=false
http-relative-path=/auth

https-key-store-file=/path/to/self_signed.jks
https-key-store-password=change-me
https-port=8443</code></pre>
Then we should start Keycloak and visit <a href="https://localhost:7080/auth/">https://localhost:7080/auth/</a> to set the admin password.
<h3>4.3. Confidential Client with Authorization-Code</h3>
Once Keycloak started, we can browse to <a href="https://localhost:7080/auth/admin/master/console/#/master/clients">https://localhost:7080/auth/admin/master/console/#/master/clients</a> to create a <em>baeldung-confidential</em> client.

<a href="https://drafts.baeldung.com/wp-content/uploads/2024/01/keycloak-client-creation-1.png"><img class="aligncenter size-full wp-image-188115" src="https://drafts.baeldung.com/wp-content/uploads/2024/01/keycloak-client-creation-1.png" alt="Keycloak client creation step 2 of 3: client authentication turned on and only standard flow selected" /></a>
<em>Client authentication</em> is turned on to specify we want a "confidential" client and only <em>Standard flow</em> is selected because we'll only use authorization-code
<a href="https://drafts.baeldung.com/wp-content/uploads/2024/01/keycloak-client-creation-2.png"><img class="aligncenter size-full wp-image-188116" src="https://drafts.baeldung.com/wp-content/uploads/2024/01/keycloak-client-creation-2.png" alt="Keycloak client creation step 3 of 3: Valid redirect URIs set for each network interface with URIs like &quot;https://localhost:7080/login/oauth2/code/baeldung-confidential&quot;, &quot;https://127.0.0.1:7080/login/oauth2/code/baeldung-confidential&quot;, etc. Valid post logout URIs and web origins set with &quot;+&quot;" /></a>

As <em>Valid redirect URIs</em>, <em>Valid post logout redirect URIs</em> and <em>Web origins, w</em>e should enter all the network interfaces of our reverse-proxy on our dev machine. As a minimum, we should have:
<ul>
 	<li>https://localhost:7080/login/oauth2/code/baeldung</li>
 	<li>https://127.0.0.1:7080/login/oauth2/code/baeldung</li>
</ul>
<h3>4.4. Working With Other OpenID Providers</h3>
Each OIDC providers having its own way to declare "confidential" OAuth2 clients, we should refer to the documentation of each for details, but all have similar configuration parameters.

For instance, on Auth0 we'd create a new <em>Regular Web Application</em> named <em>baeldung-confidential</em>. Its <em>settings</em> tab would expect the same values as those visible in the 2nd Keycloak screenshot from preceding section. We'd also create an API with <em>bff.baeldung.com</em> as identifier and with <em>baeldung-confidential</em> enabled in <em>Machine To Machine Applications</em> tab.
<h2>5. BFF Implementation with <em>spring-cloud-gateway</em> and <em>spring-addons-starter-oidc</em></h2>
Firstly, using our IDE or https://start.spring.io/, we create a new Spring Boot project named <em>bff</em> with <em>Reactive Gateway</em>  and <em>OAuth2 client</em> as dependencies.

Then we rename <em>src/main/resources/application.properties</em> to <em>src/main/resources/application.yml</em>.

Last, we'll add <em><a href="https://central.sonatype.com/artifact/com.c4-soft.springaddons/spring-addons-starter-oidc">spring-addons-starter-oidc</a></em> to our dependencies:
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.c4-soft.springaddons&lt;/groupId&gt;
    &lt;artifactId&gt;spring-addons-starter-oidc&lt;/artifactId&gt;
    &lt;version&gt;7.3.3&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
<h3>5.1. Constants</h3>
Let's start with a few constants that will help us in other sections and when needing to override some values on command line or IDE launch configuration:
<pre><code class="language-yaml">scheme: https
hostname: localhost
reverse-proxy-port: 7080
reverse-proxy-uri: ${scheme}://${hostname}:${reverse-proxy-port}
authorization-server-prefix: /auth
issuer: ${reverse-proxy-uri}${authorization-server-prefix}/realms/master
client-id: baeldung-confidential
client-secret: change-me
authorities-json-path: $.realm_access.roles
bff-port: 7081
resource-server-port: 7084
audience: </code></pre>
Of course, we'll have to override the value of client-secret with, for instance, an environment variable, a command line argument or an IDE launch configuration.
<h3>5.2. Server Properties</h3>
Now come the usual server properties:
<pre><code class="language-yaml">server:
  port: ${bff-port}
  ssl:
    enabled: true</code></pre>
<h3>5.3. <em>spring-cloud-gateway</em> Routing</h3>
As we have a single resource server behind the gateway, we need only one route definition:
<pre><code class="language-yaml">spring:
  cloud:
    gateway:
      routes:
      - id: bff
        uri: ${scheme}://${hostname}:${resource-server-port}
        predicates:
        - Path=/bff/v1/**
        filters:
        - DedupeResponseHeader=Access-Control-Allow-Credentials Access-Control-Allow-Origin
        - TokenRelay=
        - SaveSession
        - StripPrefix=2</code></pre>
The most important part are the <em>SaveSession</em> and <em>TokenRelay=</em> which form a corner-stone for the OAuth2 BFF pattern implementation: the first ensures that the session is persisted (with tokens) and the second replaces session cookie with access token in session when routing a request.

The <em>StripPrefix=2</em> filter will remove <em>/bff/v1</em> prefix from the path when routing a request.
<h3>5.4. Spring Security</h3>
We can now get into configuring OAuth2 client security with the standard Boot properties:
<pre><code class="language-yaml">spring:
  security:
    oauth2:
      client:
        provider:
          baeldung:
            issuer-uri: ${issuer}
        registration:
          baeldung:
            provider: baeldung
            authorization-grant-type: authorization_code
            client-id: ${client-id}
            client-secret: ${client-secret}
            scope: openid,profile,email,offline_access</code></pre>
Really nothing special here, just a very standard authorization-code registration with the required provider.
<h3>5.5. <em>spring-addons-starter-oidc</em></h3>
To complete the configuration, let's tune the security with <em>spring-addons-starter-oidc</em>:
<pre><code class="language-yaml">com:
  c4-soft:
    springaddons:
      oidc:
        ops:
        - iss: ${issuer}
          authorities:
          - path: ${authorities-json-path}
          aud: ${audience}
        client:
          client-uri: ${reverse-proxy-uri}
          security-matchers:
          - /bff/**
          - /login/**
          - /oauth2/**
          - /logout
          permit-all:
          - /bff/**
          - /login/**
          - /oauth2/**
          csrf: cookie-accessible-from-js
          oauth2-redirections:
            rp-initiated-logout: ACCEPTED
        resourceserver:
          permit-all:
          - /error
          - /login-options
          - /v3/api-docs/**
          - /swagger-ui/**
          - /actuator/health/readiness
          - /actuator/health/liveness</code></pre>
We have here three main sections:
<ul>
 	<li><em>ops</em>, with provider(s) specific values. This enables us to specify how to convert OpenID claims to Spring authorities. Defining an audience as done here is optional in most cases (it is not when working with Auth0)</li>
 	<li><em>client</em>, when provided with non-empty <em>security-matchers</em>, this section triggers the creation of a <em>SecurityFilterChain</em> bean with <em>oauth2Login</em>. Here, with <em>client-uri</em> property, we force the usage of the reverse-proxy URI as base for all redirections (instead of the BFF internal URI). Also, as we are using SPAs, we ask the BFF to expose CSRF token in a cookie accessible to Javascript. Last, to prevent cross-origin errors when using authorization servers with an authority of their own (this is the case with the <em>auth0</em> and <em>cognito</em> profiles), we ask that the RP-Initiated Logout response is returned with 201 status (instead of 3xx), which gives SPAs the ability to intercept this request and process it in a request with a new origin.</li>
 	<li><em>resourceserver</em>, this requests for a second <em>SecurityFilterChain</em> bean with <em>oauth2ResourceServer</em>. This filter-chain having an <em>@Order</em> with lowest precedence and no security-matcher, it will process all requests that weren't matched by other <em>SecurityFilterChain</em> beans. Here we use it for all resources for which a session is not desirable: REST and all public endpoints which aren't involved in login.</li>
</ul>
We can now run the BFF application
<h3>5.6. <em>/login-options</em> Endpoint</h3>
The BFF is the place where we defined login configuration: Spring OAuth2 client registration(s) with authorization-code. To avoid configuration duplication in each SPA (and possible inconsistencies), we'll host on the BFF a REST endpoint exposing the login option(s) from its configuration and where a user should be directed for login.

For that, all we have to do is exposing a @RestController with a single endpoint returning a value built from configuration properties:
<pre><code class="language-java">@RestController
public class LoginOptionsController {
    private final List&lt;LoginOptionDto&gt; loginOptions;

    public LoginOptionsController(OAuth2ClientProperties clientProps, SpringAddonsOidcProperties addonsProperties) {
        this.loginOptions = clientProps.getRegistration()
            .entrySet()
            .stream()
            .filter(e -&gt; "authorization_code".equals(e.getValue()
                .getAuthorizationGrantType()))
            .map(e -&gt; new LoginOptionDto(e.getValue()
                .getProvider(),
                "%s/oauth2/authorization/%s".formatted(addonsProperties.getClient()
                    .getClientUri(), e.getKey())))
            .toList();
    }

    @GetMapping(path = "/login-options", produces = MediaType.APPLICATION_JSON_VALUE)
    public Mono&lt;List&lt;LoginOptionDto&gt;&gt; getLoginOptions() throws URISyntaxException {
        return Mono.just(this.loginOptions);
    }

    public static record LoginOptionDto(@NotEmpty String label, @NotEmpty String loginUri) {
    }

}</code></pre>
<h3>5.7. Cloud OpenID Providers</h3>
RP-Initiated Logout is part of OpenID standard, but some providers do not implement it strictly. This is the case of Auth0 and Amazon Cognito for instance which do not provide an <em>end_session</em> endpoint in their OpenID configuration. Also, it may use non standard query parameters for logout.

<em>spring-addons-starter-oidc</em> supports such logout endpoints "almost" complying with the standard and the BFF configuration in the companion project contains profiles with the required configuration:
<pre><code class="language-yaml">---
spring:
  config:
    activate:
      on-profile: cognito
issuer: https://cognito-idp.us-west-2.amazonaws.com/us-west-2_RzhmgLwjl
client-id: 12olioff63qklfe9nio746es9f
client-secret: change-me
username-claim-json-path: username
authorities-json-path: $.cognito:groups
com:
  c4-soft:
    springaddons:
      oidc:
        client:
          oauth2-logout:
            baeldung:
              uri: https://spring-addons.auth.us-west-2.amazoncognito.com/logout
              client-id-request-param: client_id
              post-logout-uri-request-param: logout_uri

---
spring:
  config:
    activate:
      on-profile: auth0
issuer: https://dev-ch4mpy.eu.auth0.com/
client-id: yWgZDRJLAksXta8BoudYfkF5kus2zv2Q
client-secret: change-me
username-claim-json-path: $['https://c4-soft.com/user']['name']
authorities-json-path: $['https://c4-soft.com/user']['roles']
audience: bff.baeldung.com
com:
  c4-soft:
    springaddons:
      oidc:
        client:
          authorization-request-params:
            baeldung:
            - name: audience
              value: ${audience}
          oauth2-logout:
            baeldung:
              uri: ${issuer}v2/logout
              client-id-request-param: client_id
              post-logout-uri-request-param: returnTo</code></pre>
In addition to the required properties overrides, we can note the specification for an additional request parameter when we send an authorization request to Auth0: <em>audience</em>.
<h2>6. Resource Server with <em>spring-addons-starter-oidc</em></h2>
Our need for this system are very simple: a stateless REST API authorized with JWT access tokens, exposing a single endpoint to reflect the user-info contained in the token (or a payload with empty values if the request isn't authorized).

For this, we'll create a new Spring Boot project named <em>resource-server</em> with Spring  <em>Web</em>  and <em>OAuth2 Resource Server</em> as dependencies.

Then we rename <em>src/main/resources/application.properties</em> to <em>src/main/resources/application.yml</em>.

Last, we'll add <em><a href="https://central.sonatype.com/artifact/com.c4-soft.springaddons/spring-addons-starter-oidc">spring-addons-starter-oidc</a></em> to our dependencies:
<pre><code class="language-xml">&lt;dependency&gt;
    &lt;groupId&gt;com.c4-soft.springaddons&lt;/groupId&gt;
    &lt;artifactId&gt;spring-addons-starter-oidc&lt;/artifactId&gt;
    &lt;version&gt;7.3.3&lt;/version&gt;
&lt;/dependency&gt;</code></pre>
<h3>6.1. Configuration</h3>
Here are the properties we need for our resource server:
<pre><code class="language-yaml">scheme: https
hostname: localhost
reverse-proxy-port: 7080
reverse-proxy-uri: ${scheme}://${hostname}:${reverse-proxy-port}
authorization-server-prefix: /auth
issuer: ${reverse-proxy-uri}${authorization-server-prefix}/realms/master
username-claim-json-path: $.preferred_username
authorities-json-path: $.realm_access.roles
resource-server-port: 7084
audience: 

server:
  port: ${resource-server-port}
  ssl:
    enabled: true

com:
  c4-soft:
    springaddons:
      oidc:
        ops:
        - iss: ${issuer}
          username-claim: ${username-claim-json-path}
          authorities:
          - path: ${authorities-json-path}
          aud: ${audience}
        resourceserver:
          permit-all:
          - /me</code></pre>
Thanks to <em>spring-addons-starter-oidc</em>, this is enough to declare a stateless resource server with:
<ul>
 	<li>authorities mapping from a claim of our choice (<em>realm_access.roles</em> in the case of Keycloak with realm roles)</li>
 	<li>making <em>/me</em> accessible to anonymous requests</li>
</ul>
<h3>6.2. @RestController</h3>
Let's implement a REST endpoint returning some data from the Authentication in the security-context (if any):
<pre><code class="language-java">@RestController
public class MeController {

    @GetMapping("/me")
    public UserInfoDto getMe(Authentication auth) {
        if (auth instanceof JwtAuthenticationToken jwtAuth) {
            final var email = (String) jwtAuth.getTokenAttributes()
                .getOrDefault(StandardClaimNames.EMAIL, "");
            final var roles = auth.getAuthorities()
                .stream()
                .map(GrantedAuthority::getAuthority)
                .toList();
            final var exp = Optional.ofNullable(jwtAuth.getTokenAttributes()
                .get(JwtClaimNames.EXP)).map(expClaim -&gt; {
                    if(expClaim instanceof Long lexp) {
                        return lexp;
                    }
                    if(expClaim instanceof Instant iexp) {
                        return iexp.getEpochSecond();
                    }
                    if(expClaim instanceof Date dexp) {
                        return dexp.toInstant().getEpochSecond();
                    }
                    return Long.MAX_VALUE;
                }).orElse(Long.MAX_VALUE);
            return new UserInfoDto(auth.getName(), email, roles, exp);
        }
        return UserInfoDto.ANONYMOUS;
    }

    /**
     * @param username a unique identifier for the resource owner in the token (sub claim by default)
     * @param email OpenID email claim
     * @param roles Spring authorities resolved for the authentication in the security context
     * @param exp seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time when the access token expires
     */
    public static record UserInfoDto(String username, String email, List&lt;String&gt; roles, Long exp) {
        public static final UserInfoDto ANONYMOUS = new UserInfoDto("", "", List.of(), Long.MAX_VALUE);
    }
}</code></pre>
<h3>6.3. Multi-Tenancy</h3>
What if the frontends consuming our REST API do not all authorize their users on the same authorization server (or if they offer a choice of authorization servers)?

With <em>spring-security-starter-oidc</em>, this is dead simple to solve: <em>com.c4-soft.springaddons.oidc.ops</em> configuration property is an array and we can add as many issuers as we trust, each with its own mapping for user name and authorities. A valid token issued by any of these issuers will be accepted by our resource server.
<h2>7. SPAs</h2>
Because there are some slight differences between the framework used to create SPAs, we'll cover the three major ones: Angular, React and Vue.

However, creating SPAs is out of the scope of this article. Here after, we'll focus only on what it takes for a web application to login &amp; logout users on an OAuth2 BFF and query a REST API behind it. Please refer to the companion repo for complete implementations.

For demonstration purposes, we'll provide with two different login experiences:
<ul>
 	<li>the user is redirected to the authorization server using the current browser tab (the SPA temporarily "exits")</li>
 	<li>authorization server forms are displayed in an iframe inside the SPA, which requires <em>SameOrigin</em> for the SPA and the authorization server and, as so, works only with the default profile (Keycloak)</li>
</ul>
<h3>7.1. Angular</h3>
Let's first create user.service.ts, a regular Angular @Injectable responsible for maintaining data about current user:
<pre><code class="language-typescript">@Injectable({
  providedIn: 'root',
})
export class UserService {
  private user$ = new BehaviorSubject&lt;User&gt;(User.ANONYMOUS);
  private refreshSub?: Subscription;

  constructor(private http: HttpClient) {
    this.refresh();
  }

  refresh(): void {
    this.refreshSub?.unsubscribe();
    this.http.get('/bff/v1/me').subscribe({
      next: (dto: any) =&gt; {
        const user = dto as UserinfoDto;
        this.user$.next(
          user.username
            ? new User(user.username || '', user.email || '', user.roles || [])
            : User.ANONYMOUS
        );
        if (!!user.username) {
          const now = Date.now();
          const delay = (1000 * user.exp - now) * 0.8;
          if (delay &gt; 2000) {
            this.refreshSub = interval(delay).subscribe(() =&gt; this.refresh());
          }
        }
      },
      error: (error) =&gt; {
        console.warn(error);
        this.user$.next(User.ANONYMOUS);
      },
    });
  }

  async logout() {
    lastValueFrom(
      this.http.post('/logout', null, {
        headers: {
          'X-POST-LOGOUT-SUCCESS-URI': baseUri,
        },
        observe: 'response',
      })
    )
      .then((resp) =&gt; {
        const logoutUri = resp.headers.get('Location');
        if (!!logoutUri) {
          window.location.href = logoutUri;
        }
      })
      .finally(() =&gt; {
        this.user$.next(User.ANONYMOUS);
      });
  }

  get loginOptions(): Observable&lt;Array&lt;LoginOptionDto&gt;&gt; {
    return this.http
      .get('/login-options')
      .pipe(map((dto: any) =&gt; dto as LoginOptionDto[]));
  }

  get valueChanges(): Observable&lt;User&gt; {
    return this.user$;
  }

  get current(): User {
    return this.user$.value;
  }
}</code></pre>
The <em>refresh()</em> method calls the REST API through the BFF to get some data about the current user. If the user has an active session on the BFF, the TokenRelay can do its job, the request to the resource server has a valid access token and the response contains things like username, granted authorities and access token expiration time. This last attribute gives us the opportunity to schedule another <em>refresh()</em> call just before the token expires, which will keep the session alive.

Another point of interest is RP-Initiated Logout implementation:
<ul>
 	<li>first, we send a <em>POST</em> request to the BFF, with a <em>X-POST-LOGOUT-SUCCESS-URI</em> header to instruct <em>spring-addons-starter-oidc</em> where to redirect the user after the authorization server responds (after next step)</li>
 	<li>as we configured the BFF to respond to logout with a <em>201</em> status (instead of <em>302</em>), our SPA can <em>observe</em> the response and follow to the <em>Location</em> header by setting <em>window.location.href</em>. This saves us from many CORS errors because the request to the authorization server will have an origin and a referer of it's own, as well as fresh headers.</li>
</ul>
The last important point is login, which happens in the <em>AuthenticationComponent</em>. Two methods are of special interest for us:
<pre><code class="language-typescript">  login() {
    if (!this.loginUri) {
      return;
    }

    const url = new URL(this.loginUri);
    url.searchParams.append(
      'post_login_success_uri',
      `${baseUri}${this.router.url}`
    );
    const loginUrl = url.toString();

    if (this.selectedLoginExperience.value === LoginExperience.IFRAME) {
      this.iframeSrc = this.sanitizer.bypassSecurityTrustResourceUrl(loginUrl);
      this.isLoginModalDisplayed = true;
    } else {
      window.location.href = loginUrl;
    }
  }

  iframeLoad(event: any) {
    if (!!event.currentTarget.src) {
      this.user.refresh();
      this.isLoginModalDisplayed = !this.user.current.isAuthenticated;
    }
  }</code></pre>
The login() method first adds a <em>post_login_success_uri</em> request parameter to instruct <em>spring-addons-starter-oidc</em> that the last redirect URI should point to the active route when it started.

Then we either set the source of the iframe (and display it) or "exit" our SPA by replacing the current tab content with authorization server one.

When using iframe, it reloads each time it receives one of the authorization-code flow redirection. The <em>iframeLoad()</em> method hooks into this <em>load</em> events to check if user status changed (and hide the iframe if user authenticated).

<strong>Important note</strong>: to run the Angular app in the companion repo, in <em>angular.json</em>, edit the <em>local</em> serve configuration to point to your own self-signed certificate. Then run <em>ng serve -c local</em> and point your browser to <a href="https://localhost:7080/angular-ui/">https://localhost:7080/angular-ui/</a> (not https://localhost:4201/angular-ui/ which would skip the reverse-proxy).
<h3>7.2. Vue</h3>
<h3>7.3. React</h3>
<h3>7.4. Multi-Tenancy</h3>
In the companion project, there is a single OAuth2 client registration with authorization-code. But what if we had more?

The user should be prompted to choose only between OPs he can actually authenticate on, and in many cases, we can filter the login-options.

Here are a few samples of situations where we can drastically shrink the number of option, ideally to one:
<ul>
 	<li>the SPA is configured with a specific option to use</li>
 	<li>there are several reverse-proxies and each can set something like a header with the option to use</li>
 	<li>some technical info, like the IP of the device the frontend runs on, can tell us that a user should be authorized here or there</li>
</ul>
In such situations, we have two choices:
<ul>
 	<li>send filtering criteria with the request to <em>/login-options</em> and filter in the BFF controller to return only the relevant options</li>
 	<li>filter <em>/login-options</em> response inside the SPA</li>
</ul>
<h2>8. Conclusion</h2>
In this tutorial, with saw how to implement a BFF for SPA with spring-cloud-gateway and <em>spring-addons-starter-oidc</em>.

We also saw why this solution should be prefered over configuring SPAs as public OAuth2 client, that it has very little impact on the SPA itself and changes nothing at all on resource servers.

Last, we started to explore how convenient <em>spring-addons-starter-oidc</em> can be to configure, with just properties, what usually requires quite some Java configuration:
<ul>
 	<li>map authorities from any claim(s) (and add prefix or force upper / lower case)</li>
 	<li>change OAuth2 redirect URIs to point to a reverse-proxy instead of the internal OAuth2 client</li>
 	<li>accept more than one  issuer on resource servers</li>
 	<li>give SPAs the opportunity to set the route where the user is redirected after login / logout</li>
 	<li>adapt to not exactly standard <em>RP-Initiated Logout</em> (for Auth0 and Amazon Cognito)</li>
 	<li>add optional parameters to authorization request (Auth0 <em>audience</em> or whatever)</li>
 	<li>change the HTTP status of authorization-code responses so that SPA can choose how to follow to <em>Location</em> header</li>
 	<li>define which endpoints are accessible to anonymous</li>
</ul>
As usual, all the code implementations are available over on GitHub.